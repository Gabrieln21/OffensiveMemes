<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Your Profile</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="/socket.io/socket.io.js"></script>
  <script>
    tailwind.config = {
      theme: {
        extend: {
          keyframes: {
            float: { '0%, 100%': { transform: 'translateY(0)' }, '50%': { transform: 'translateY(-10px)' } },
            sparkle: { '0%, 100%': { opacity: 1 }, '50%': { opacity: 0.4 } },
            neonPulse: {
              '0%, 100%': { boxShadow: '0 0 20px #ff0000, 0 0 40px #ff0000, 0 0 60px #ff0000', transform: 'scale(1)' },
              '50%': { boxShadow: '0 0 25px #ff4444, 0 0 50px #ff4444, 0 0 75px #ff4444', transform: 'scale(1.02)' }
            }
          },
          animation: {
            float: 'float 3s ease-in-out infinite',
            sparkle: 'sparkle 2s ease-in-out infinite',
            neonPulse: 'neonPulse 2s ease-in-out infinite'
          }
        }
      }
    };
  </script>
</head>
<body class="min-h-screen bg-gradient-to-br from-purple-800 via-fuchsia-900 to-black text-white font-sans">
  <a href="/" class="back-button fixed top-6 left-6 z-50 text-red-500 hover:text-red-400 font-bold text-lg uppercase tracking-wide flex items-center gap-2 bg-black/80 px-5 py-3 rounded-full border border-red-500/30 hover:border-red-500/50 transition-all duration-300 hover:-translate-x-1">
    <span class="text-2xl">‚Üê</span>
    Back
  </a>  
  <style>
    .back-button {
      text-shadow: 0 0 15px rgba(255, 0, 0, 0.4);
      box-shadow: 0 0 20px rgba(20, 20, 20, 0.8);
      backdrop-filter: blur(5px);
    }
    .back-button:hover {
      text-shadow: 0 0 25px rgba(255, 0, 0, 0.7);
    }
  </style>
  <!-- Notifications Bell -->
    <div id="notificationWrapper" class="absolute top-6 right-6">
      <button id="notificationBell" class="text-white text-xl hover:text-yellow-300 relative">
      üîî
      <span id="notificationDot" class="absolute -top-1 -right-1 w-3 h-3 bg-red-500 rounded-full hidden"></span>
      </button>
      <div id="notificationDropdown" class="absolute right-0 mt-2 w-80 bg-black/90 rounded-lg shadow-xl hidden z-50 text-sm">
      <div class="p-3 font-bold border-b border-purple-600 text-purple-300">Notifications</div>
      <div id="notificationList" class="max-h-64 overflow-y-auto divide-y divide-purple-700">
          <div class="p-3 text-gray-400">Loading...</div>
      </div>
      </div>
  </div>
  <div class="container mx-auto px-6 py-12 max-w-5xl relative z-0">
    
    <div class="bg-black/40 border border-white/10 rounded-3xl p-8 shadow-2xl backdrop-blur-md">
      <div class="flex items-center justify-between flex-wrap gap-6">
        <div class="flex items-center gap-6">
          <img src="<%= user.avatarUrl || '/uploads/avatars/default-avatar.png' %>" alt="Avatar" class="w-24 h-24 rounded-full border-4 border-purple-500 shadow-lg">
          <div>
            <h1 class="text-4xl font-extrabold bg-gradient-to-r from-purple-300 to-pink-400 bg-clip-text text-transparent">
              <%= user.username %>
            </h1>
            <button id="openFriendsBtn"
              class="bg-purple-800/50 hover:bg-purple-700 text-sm text-white px-3 py-1 rounded-md shadow border border-purple-500 transition-all mt-1">
              üë• <%= friendCount %> friend<%= friendCount === 1 ? '' : 's' %>
            </button>
          
          </div>
        </div>
        <% if (session.user && session.user.id === user.id) { %>
          <a href="/profile/edit" class="inline-block bg-pink-600 hover:bg-pink-700 text-white font-semibold px-5 py-2 rounded-xl shadow-lg transition-all duration-300">
            ‚úèÔ∏è Edit Profile
          </a>
        <% } else if (isFriend) { %>
          <form method="POST" action="/profile/remove-friend">
            <input type="hidden" name="targetId" value="<%= user.id %>" />
            <button type="submit" class="px-4 py-2 text-sm font-semibold rounded-md bg-red-600 hover:bg-red-700 text-white shadow-md transition">
              ‚àí Remove Friend
            </button>
          </form>
        <% } else if (hasPendingRequest) { %>
          <button disabled class="px-4 py-2 text-sm font-semibold rounded-md bg-yellow-600 text-white shadow-md cursor-not-allowed">
            üïì Request Sent
          </button>
        <% } else { %>
          <form method="POST" action="/profile/add-friend">
            <input type="hidden" name="targetId" value="<%= user.id %>" />
            <button type="submit" class="px-4 py-2 text-sm font-semibold rounded-md bg-green-600 hover:bg-green-700 text-white shadow-md transition">
              + Add Friend
            </button>
          </form>
        <% } %>
        
        
      </div>

      <div class="mt-10">
        <h2 class="text-2xl font-semibold text-purple-300 mb-4">Stats</h2>
        <div class="grid grid-cols-1 sm:grid-cols-2 gap-6">
          <div class="bg-purple-800/40 p-4 rounded-xl border border-purple-500 shadow">
            <p class="text-sm text-purple-200">Total Games Played</p>
            <p class="text-2xl font-bold text-white"><%= stats.gamesPlayed %></p>
          </div>
          <div class="bg-purple-800/40 p-4 rounded-xl border border-purple-500 shadow">
            <p class="text-sm text-purple-200">Total Wins</p>
            <p class="text-2xl font-bold text-white"><%= stats.wins %></p>
          </div>
          <div class="bg-purple-800/40 p-4 rounded-xl border border-purple-500 shadow">
            <p class="text-sm text-purple-200">All-Time Points</p>
            <p class="text-2xl font-bold text-white"><%= stats.totalPoints %></p>
          </div>
          <div class="bg-purple-800/40 p-4 rounded-xl border border-purple-500 shadow">
            <p class="text-sm text-purple-200">Average Score</p>
            <p class="text-2xl font-bold text-white"><%= stats.avgScore.toFixed(2) %></p>
          </div>
        </div>
      </div>

      <div class="mt-10">
        <h2 class="text-2xl font-semibold text-purple-300 mb-4">‚≠ê Starred Memes</h2>
        <div id="starredMemes" class="grid grid-cols-1 sm:grid-cols-2 gap-6">
          <% starredMemes.forEach(meme => { %>
            <div class="relative group" data-meme='<%- JSON.stringify(meme) %>' onclick="openMemeModal(this)">
              <img src="<%= meme.image_url %>" alt="Starred Meme"
                   class="rounded-xl w-full aspect-square object-cover shadow-md hover:scale-105 transition-transform duration-300" />
              <div class="absolute bottom-2 left-2 text-xs bg-black/60 px-2 py-1 rounded text-white">
                ‚ù§Ô∏è <%= meme.likes %>
              </div>
            
              <% if (session.user && session.user.id === user.id) { %>
                <form action="/profile/unstar" method="POST"
                      onclick="event.stopPropagation();"
                      class="absolute top-2 right-2">
                  <input type="hidden" name="imageUrl" value="<%= meme.image_url %>">
                  <button type="submit" title="Unstar"
                          class="text-red-500 hover:text-red-700 bg-black/50 rounded-full px-2 py-1 text-xs shadow-lg transition">
                    üóë
                  </button>
                </form>
              <% } %>
            </div>
            
          <% }) %>
        </div>

        <!-- Meme Modal -->
        <div id="memeModal" class="fixed inset-0 bg-black/90 backdrop-blur-sm flex items-center justify-center p-6" style="display: none;">
          <div class="bg-gray-900/95 max-w-5xl w-full rounded-xl shadow-2xl relative overflow-hidden flex flex-col sm:flex-row gap-4 p-6">
            <button onclick="closeMemeModal()" class="absolute top-4 right-4 text-white/80 hover:text-white text-xl transition-colors">‚úñ</button>
            <div class="flex-1">
              <img id="modalMemeImage" src="" class="rounded-xl w-full max-h-[75vh] object-contain" />
              <div class="flex items-center gap-3 mt-4">
                <button onclick="likeMeme()" class="text-pink-400 hover:text-pink-600 text-lg transition-colors">‚ù§Ô∏è Like</button>
                <span id="modalMemeLikes" class="text-purple-200 text-sm"></span>
              </div>
            </div>
            <div class="w-full sm:w-80 space-y-3">
              <h3 class="text-xl font-bold text-purple-300">üí¨ Comments</h3>
              <div id="modalComments" class="space-y-2 max-h-[300px] overflow-y-auto pr-2"></div>
              <form onsubmit="submitComment(event)" class="mt-2 flex flex-col gap-2">
                <input type="hidden" id="modalMemeId" />
                <input type="hidden" id="modalProfileId" />
                <input id="commentInput" type="text" placeholder="Add a comment..." required
                       class="w-full px-3 py-2 rounded bg-black/40 border border-purple-600/30 text-white placeholder-purple-300" />
                <button type="submit" class="bg-purple-600 hover:bg-purple-700 text-white px-4 py-2 rounded-lg transition-colors">üí¨ Comment</button>
              </form>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  <script>
    let currentMeme = null;

    function openMemeModal(element) {
      const meme = JSON.parse(element.dataset.meme);
      currentMeme = meme;
      
      document.getElementById('modalMemeImage').src = meme.image_url;
      document.getElementById('modalMemeId').value = meme.id;
      document.getElementById('modalProfileId').value = window.location.pathname.split('/').pop();
      document.getElementById('modalMemeLikes').innerText = `${meme.likes} like${meme.likes === 1 ? '' : 's'}`;
      
      renderComments(meme.comments || []);
      const modal = document.getElementById('memeModal');
      modal.style.display = 'flex';
      document.body.style.overflow = 'hidden'; // Prevent scrolling when modal is open
    }

    function renderComments(comments) {
      const container = document.getElementById('modalComments');
      container.innerHTML = '';
      
      comments.forEach(comment => {
        const div = document.createElement('div');
        div.className = 'bg-black/30 border border-white/10 rounded-lg p-2 text-sm text-purple-100';
        div.innerHTML = `<strong>${comment.username}</strong>: ${comment.content}`;
        container.appendChild(div);
      });
    }

    async function likeMeme() {
      if (!currentMeme) return;
      
      try {
        const res = await fetch('/profile/like', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ memeId: currentMeme.id })
        });
        
        const data = await res.json();
        if (data.success) {
          currentMeme.likes = data.likeCount;
          document.getElementById('modalMemeLikes').innerText = 
            `${data.likeCount} like${data.likeCount === 1 ? '' : 's'}`;
            
          // Update the like count on the card too
          const memeCard = document.querySelector(`[data-meme*='"id":${currentMeme.id}']`);
          if (memeCard) {
            const likeCounter = memeCard.querySelector('.absolute.bottom-2.left-2');
            if (likeCounter) {
              likeCounter.innerText = `‚ù§Ô∏è ${data.likeCount}`;
            }
          }
        }
      } catch (err) {
        console.error('Error liking meme:', err);
      }
    }

    async function submitComment(event) {
      event.preventDefault();
      if (!currentMeme) return;
      
      const input = document.getElementById('commentInput');
      const content = input.value.trim();
      if (!content) return;
      
      try {
        const res = await fetch('/profile/comment', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            memeId: currentMeme.id,
            content,
            profileId: document.getElementById('modalProfileId').value
          })
        });
        
        const data = await res.json();
        if (data.success) {
          if (!currentMeme.comments) currentMeme.comments = [];
          currentMeme.comments.unshift(data.comment);
          renderComments(currentMeme.comments);
          input.value = '';
        }
      } catch (err) {
        console.error('Error posting comment:', err);
      }
    }

    function closeMemeModal() {
      const modal = document.getElementById('memeModal');
      modal.style.display = 'none';
      document.body.style.overflow = ''; // Restore scrolling
      currentMeme = null;
    }
  
    async function openFriendsModal() {
      document.getElementById('friendsModal').classList.remove('hidden');
      const res = await fetch('/friends/api');
      const data = await res.json();

      const container = document.getElementById('friendListContainer');
      const search = document.getElementById('friendSearch');

      function renderList(friends) {
        container.innerHTML = '';
        friends.forEach(friend => {
          const wrapper = document.createElement('div');
          wrapper.className = 'flex justify-between items-center bg-black/30 p-3 rounded-md';

          const info = document.createElement('div');
          info.className = 'flex items-center gap-3';

          const avatar = document.createElement('img');
          avatar.src = friend.avatar_url || '/uploads/avatars/default-avatar.png';
          avatar.alt = `${friend.username}'s avatar`;
          avatar.className = 'w-10 h-10 rounded-full border border-purple-500 object-cover';

          const nameLink = document.createElement('a');
          nameLink.href = `/profile/${friend.id}`;
          nameLink.className = 'text-purple-200 hover:underline font-semibold';
          nameLink.textContent = friend.username;

          info.appendChild(avatar);
          info.appendChild(nameLink);

          const btn = document.createElement('button');
          btn.className = 'px-3 py-1 text-sm rounded font-medium transition';

          if (friend.status === 'accepted') {
            btn.innerText = '‚àí Remove';
            btn.classList.add('bg-red-500', 'hover:bg-red-600');
            btn.onclick = async () => {
              const res = await fetch('/profile/remove-friend', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ targetId: friend.id })
              });
              if (res.ok) openFriendsModal(); // reload
            };
          } else if (friend.status === 'pending') {
            btn.innerText = 'üïì Requested';
            btn.disabled = true;
            btn.classList.add('bg-yellow-600', 'cursor-not-allowed', 'text-white');
          } else {
            btn.innerText = '+ Add';
            btn.classList.add('bg-green-500', 'hover:bg-green-600');
            btn.onclick = async () => {
              const res = await fetch('/profile/add-friend', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ targetId: friend.id })
              });
              if (res.ok) openFriendsModal(); // reload
            };
          }

          wrapper.appendChild(info);
          wrapper.appendChild(btn);
          container.appendChild(wrapper);
        });
      }

      renderList(data.friends);
      search.oninput = () => {
        const q = search.value.toLowerCase();
        renderList(data.friends.filter(friend => friend.username.toLowerCase().includes(q)));
      };
    }

  
    function closeFriendsModal() {
      document.getElementById('friendsModal').classList.add('hidden');
    }
  
    // ‚úÖ Assign click listeners now that DOM is ready
    window.openFriendsModal = openFriendsModal;
    window.closeFriendsModal = closeFriendsModal;
  
    const openBtn = document.getElementById('openFriendsBtn');
    if (openBtn) openBtn.addEventListener('click', openFriendsModal);
  </script>
  <script>
    // Initialize socket connection
    const socket = io();
    window.socket = socket;

    const bell = document.getElementById('notificationBell');
    const dropdown = document.getElementById('notificationDropdown');
    const dot = document.getElementById('notificationDot');
    const list = document.getElementById('notificationList');
  
    async function loadNotifications() {
      const res = await fetch('/notifications/api');
      const data = await res.json();
  
      list.innerHTML = '';
      if (data.notifications.length === 0) {
        list.innerHTML = '<div class="p-3 text-gray-400">No notifications yet.</div>';
        dot.classList.add('hidden');
        return;
      }
  
      let hasUnread = false;
  
      data.notifications.forEach(n => {
        const item = document.createElement('a');
        item.className = `block p-3 hover:bg-purple-800/30 transition ${n.is_read ? 'text-gray-300' : 'text-white font-semibold'}`;
        item.href = getNotificationUrl(n);
        item.target = '_blank';
        item.innerText = n.message;
  
        // üßº Delete after click
        item.addEventListener('click', async (e) => {
          e.preventDefault();
          await fetch('/notifications/delete-single', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ id: n.id })
          });
          item.remove();
          if (list.children.length === 0) {
            list.innerHTML = '<div class="p-3 text-gray-400">No notifications yet.</div>';
          }
          setTimeout(() => {
            window.location.href = getNotificationUrl(n);
          }, 100);
        });
  
        list.appendChild(item);
        if (!n.is_read) hasUnread = true;
      });
  
      dot.classList.toggle('hidden', !hasUnread);
    }
  
    function getNotificationUrl(n) {
      switch (n.type) {
        case 'star_meme':
          return '/profile';
        case 'friend_request':
          return '/friends/page';
        default:
          return '/';
      }
    }
  
    bell?.addEventListener('click', async () => {
      dropdown.classList.toggle('hidden');
      if (!dropdown.classList.contains('hidden')) {
        await loadNotifications();
        await fetch('/notifications/mark-read', { method: 'POST' });
        dot.classList.add('hidden');
      }
    });

    // Listen for socket notifications
    socket.on('notification', (data) => {
      // Show the red dot
      if (data.unreadCount > 0) {
        dot.classList.remove('hidden');
      }

      // If dropdown is open, refresh the list
      if (!dropdown.classList.contains('hidden')) {
        loadNotifications();
      }
    });

    // Initial load
    loadNotifications();
  </script>
  
  <% if (typeof unreadCount !== 'undefined' && unreadCount > 0) { %>
    <script>
      document.addEventListener('DOMContentLoaded', () => {
        document.getElementById('notificationDot')?.classList.remove('hidden');
      });
    </script>
  <% } %>
  <!-- Friends Modal -->
  <div id="friendsModal" class="fixed inset-0 z-50 hidden bg-black/80 backdrop-blur-sm flex justify-center pt-24">
    <div class="bg-gray-900 max-w-md w-full rounded-xl p-6 shadow-2xl relative max-h-[80vh] overflow-y-auto">
      <button onclick="closeFriendsModal()" class="absolute top-3 right-3 text-white text-xl">‚úñ</button>
      <h2 class="text-xl text-purple-300 mb-4">Friends</h2>
      <input id="friendSearch" type="text" placeholder="Search..." class="w-full mb-3 px-3 py-2 rounded bg-black/40 text-white border border-purple-600/30" />
      <div id="friendListContainer" class="space-y-3"></div>
    </div>
  </div>
  
  

</body>
</html>
