<!-- Tailwind CSS via CDN (for development only) -->
<script src="https://cdn.tailwindcss.com"></script>
<script src="/socket.io/socket.io.js"></script>
<script>
    tailwind.config = {
        theme: {
            extend: {
                keyframes: {
                    wiggle: {
                        '0%, 100%': { transform: 'rotate(-3deg)' },
                        '50%': { transform: 'rotate(3deg)' },
                    },
                    float: {
                        '0%, 100%': { transform: 'translateY(0)' },
                        '50%': { transform: 'translateY(-20px)' },
                    },
                    pulse3D: {
                        '0%, 100%': { transform: 'scale3d(1, 1, 1)' },
                        '50%': { transform: 'scale3d(1.05, 1.05, 1.05)' },
                    },
                    sparkle: {
                        '0%, 100%': { opacity: 1 },
                        '50%': { opacity: 0.4 }
                    },
                    neonPulse: {
                        '0%, 100%': {
                            'box-shadow': '0 0 20px #ff0000, 0 0 40px #ff0000, 0 0 60px #ff0000',
                            transform: 'scale(1)'
                        },
                        '50%': {
                            'box-shadow': '0 0 25px #ff4444, 0 0 50px #ff4444, 0 0 75px #ff4444',
                            transform: 'scale(1.02)'
                        }
                    },
                    cardFlip: {
                        '0%': { transform: 'rotateY(0deg)' },
                        '100%': { transform: 'rotateY(360deg)' }
                    }
                },
                animation: {
                    wiggle: 'wiggle 1s ease-in-out infinite',
                    float: 'float 3s ease-in-out infinite',
                    pulse3D: 'pulse3D 2s ease-in-out infinite',
                    sparkle: 'sparkle 2s ease-in-out infinite',
                    neonPulse: 'neonPulse 2s ease-in-out infinite',
                    cardFlip: 'cardFlip 3s linear infinite'
                }
            }
        }
    }
</script>

<div class="relative min-h-screen bg-[radial-gradient(ellipse_at_top,_var(--tw-gradient-stops))] from-purple-800 via-fuchsia-900 to-black text-white">
    <a href="/" class="back-button fixed top-6 left-6 z-50 text-red-500 hover:text-red-400 font-bold text-lg uppercase tracking-wide flex items-center gap-2 bg-black/80 px-5 py-3 rounded-full border border-red-500/30 hover:border-red-500/50 transition-all duration-300 hover:-translate-x-1">
        <span class="text-2xl">‚Üê</span>
        Back
    </a>

    <style>
        .back-button {
            text-shadow: 0 0 15px rgba(255, 0, 0, 0.4);
            box-shadow: 0 0 20px rgba(20, 20, 20, 0.8);
            backdrop-filter: blur(5px);
        }

        .back-button:hover {
            text-shadow: 0 0 25px rgba(255, 0, 0, 0.7);
        }
    </style>
    <!-- Notifications Bell -->
    <div id="notificationWrapper" class="absolute top-6 right-6">
        <button id="notificationBell" class="text-white text-xl hover:text-yellow-300 relative">
        üîî
        <span id="notificationDot" class="absolute -top-1 -right-1 w-3 h-3 bg-red-500 rounded-full hidden"></span>
        </button>
        <div id="notificationDropdown" class="absolute right-0 mt-2 w-80 bg-black/90 rounded-lg shadow-xl hidden z-50 text-sm">
        <div class="p-3 font-bold border-b border-purple-600 text-purple-300">Notifications</div>
        <div id="notificationList" class="max-h-64 overflow-y-auto divide-y divide-purple-700">
            <div class="p-3 text-gray-400">Loading...</div>
        </div>
        </div>
    </div>
  
    <div class="container mx-auto px-4 py-16 relative z-10">
        <div class="text-center mb-16">
            <div class="relative inline-block">
                <h1 class="text-7xl font-black mb-6 bg-gradient-to-r from-red-400 via-white to-red-400 bg-clip-text text-transparent tracking-wider drop-shadow-2xl">Meme Battle Rules</h1>
                <div class="absolute -top-8 -right-8 w-16 h-16 bg-gradient-to-br from-yellow-400 to-red-600 rounded-full blur-xl opacity-70 animate-pulse"></div>
            </div>
            <p class="text-2xl text-gray-300 tracking-wide font-light">This is a completely unfiltered meme showdown. No censorship. No mercy.</p>
        </div>

        <div class="max-w-4xl mx-auto space-y-12">
            <!-- Game Setup -->
            <div class="bg-black/30 backdrop-blur-lg border border-white/10 rounded-3xl p-8">
                <h2 class="text-3xl font-bold mb-6 text-red-400">Game Setup</h2>
                <div class="grid grid-cols-2 md:grid-cols-4 gap-6 mt-8">
                    <div class="bg-black/50 p-6 rounded-xl text-center">
                        <span class="text-3xl mb-4 block">üë•</span>
                        <span class="font-bold text-xl">3-8</span>
                        <span class="text-gray-400 block">Players</span>
                    </div>
                    <div class="bg-black/50 p-6 rounded-xl text-center">
                        <span class="text-3xl mb-4 block">üïí</span>
                        <span class="font-bold text-xl">~15-20 min</span>
                        <span class="text-gray-400 block">Per Round</span>
                    </div>
                    <div class="bg-black/50 p-6 rounded-xl text-center">
                        <span class="text-3xl mb-4 block">üö´</span>
                        <span class="font-bold text-xl">18+</span>
                        <span class="text-gray-400 block">NSFW & Raw</span>
                    </div>
                    <div class="bg-black/50 p-6 rounded-xl text-center">
                        <span class="text-3xl mb-4 block">üñºÔ∏è</span>
                        <span class="font-bold text-xl">Template Based</span>
                        <span class="text-gray-400 block">Meme Creation</span>
                    </div>
                </div>
            </div>

            <!-- Phases -->
            <div class="bg-black/30 backdrop-blur-lg border border-white/10 rounded-3xl p-8">
                <h2 class="text-3xl font-bold mb-6 text-yellow-400">How It Works</h2>
                <ul class="space-y-4 text-gray-300">
                    <li><span class="text-red-400">üî•</span> Everyone gets the same 5 meme templates to choose from.</li>
                    <li><span class="text-red-400">üß†</span> Players add captions anywhere on the meme to make it hit hard ‚Äî or be hilariously stupid.</li>
                    <li><span class="text-red-400">üì§</span> Everyone submits their meme ‚Äî even if it's mid.</li>
                    <li><span class="text-red-400">üó≥Ô∏è</span> Voting begins: each meme is shown one at a time, and everyone votes simultaneously (except the creator).</li>
                    <li><span class="text-red-400">‚≠ê</span> You can star your own memes if you're proud. These appear in your profile later.</li>
                    <li><span class="text-red-400">üèÜ</span> Highest total points after all memes = winner. Bonus points for unanimous wins, speed, and savagery.</li>
                </ul>
            </div>

            <!-- Unfiltered Warning -->
            <div class="bg-black/30 backdrop-blur-lg border border-white/10 rounded-3xl p-8">
                <h2 class="text-3xl font-bold mb-6 text-pink-500">Important Note</h2>
                <p class="text-lg text-gray-300 leading-relaxed">
                    This is a game for adults. Shocking memes, dark humor, internet in-jokes, and trash talk are all part of the experience. If you're easily offended, this probably isn't for you.
                    
                    <br><br>
                    But if you're ready to test your meme skills in an unfiltered battle of wit, chaos, and questionable decisions ‚Äî welcome to the arena.
                </p>
            </div>
        </div>
    </div>
</div>
<!-- Notification Scripts -->
<script>
    // Initialize socket connection
    const socket = io();
    window.socket = socket;

    const bell = document.getElementById('notificationBell');
    const dropdown = document.getElementById('notificationDropdown');
    const dot = document.getElementById('notificationDot');
    const list = document.getElementById('notificationList');
  
    async function loadNotifications() {
      const res = await fetch('/notifications/api');
      const data = await res.json();
  
      list.innerHTML = '';
      if (data.notifications.length === 0) {
        list.innerHTML = '<div class="p-3 text-gray-400">No notifications yet.</div>';
        dot.classList.add('hidden');
        return;
      }
  
      let hasUnread = false;
  
      data.notifications.forEach(n => {
        const item = document.createElement('a');
        item.className = `block p-3 hover:bg-purple-800/30 transition ${n.is_read ? 'text-gray-300' : 'text-white font-semibold'}`;
        item.href = getNotificationUrl(n);
        item.target = '_blank';
        item.innerText = n.message;
  
        // üßº Delete after click
        item.addEventListener('click', async (e) => {
          e.preventDefault();
          await fetch('/notifications/delete-single', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ id: n.id })
          });
          item.remove();
          if (list.children.length === 0) {
            list.innerHTML = '<div class="p-3 text-gray-400">No notifications yet.</div>';
          }
          setTimeout(() => {
            window.location.href = getNotificationUrl(n);
          }, 100);
        });
  
        list.appendChild(item);
        if (!n.is_read) hasUnread = true;
      });
  
      dot.classList.toggle('hidden', !hasUnread);
    }
  
    function getNotificationUrl(n) {
      switch (n.type) {
        case 'star_meme':
          return '/profile';
        case 'friend_request':
          return '/friends/page';
        default:
          return '/';
      }
    }
  
    bell?.addEventListener('click', async () => {
      dropdown.classList.toggle('hidden');
      if (!dropdown.classList.contains('hidden')) {
        await loadNotifications();
        await fetch('/notifications/mark-read', { method: 'POST' });
        dot.classList.add('hidden');
      }
    });

    // Listen for socket notifications
    socket.on('notification', (data) => {
      // Show the red dot
      if (data.unreadCount > 0) {
        dot.classList.remove('hidden');
      }

      // If dropdown is open, refresh the list
      if (!dropdown.classList.contains('hidden')) {
        loadNotifications();
      }
    });

    // Initial load
    loadNotifications();
</script>
  
<% if (typeof unreadCount !== 'undefined' && unreadCount > 0) { %>
  <script>
    document.addEventListener('DOMContentLoaded', () => {
      document.getElementById('notificationDot')?.classList.remove('hidden');
    });
  </script>
<% } %>